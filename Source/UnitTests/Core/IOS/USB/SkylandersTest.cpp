#include <gtest/gtest.h>

#include <array>

#include <Common/BitUtils.h>

#include "Core/IOS/USB/Emulated/Skylanders/SkylanderCrypto.h"
#include "Core/IOS/USB/Emulated/Skylanders/SkylanderFigure.h"
using namespace IOS::HLE::USB::SkylanderCrypto;

const std::array<u8, IOS::HLE::USB::FIGURE_SIZE> decrypted_jaw_breaker = {
    0x2F, 0x33, 0xEC, 0xEE, 0x1E, 0x81, 0x01, 0x0F, 0xC4, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
    0xD6, 0x01, 0x00, 0x00, 0x0B, 0xCB, 0x97, 0xE4, 0x2C, 0x4E, 0x01, 0x00, 0x00, 0x30, 0x66, 0x17,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x60, 0xCF, 0x62, 0x7D, 0x6C, 0x2A, 0x77, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE8, 0x80, 0x00, 0xE8, 0xFD, 0x95, 0x67, 0x01, 0x00, 0x9E, 0xA2, 0xCB, 0xE9, 0xB9, 0xFE, 0x05,
    0xFF, 0x03, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x13, 0x19, 0x06, 0xE6, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x07, 0x1C, 0x01,
    0x32, 0x0C, 0x0B, 0x0A, 0xDE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC6, 0x46, 0xC2, 0x30, 0xDD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xF7, 0xFC, 0x3C, 0x0C, 0xF8, 0x00, 0x00, 0x00, 0x88, 0x8A, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xE8, 0x80, 0x00, 0xE8, 0xFD, 0xAC, 0x67, 0x01, 0x00, 0x9F, 0x06, 0x93, 0xE9, 0xB9, 0x89, 0xC8,
    0xFF, 0x03, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x13, 0x19, 0x06, 0xE6, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x07, 0x1C, 0x01,
    0x32, 0x0C, 0x0B, 0x0A, 0xDE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xC6, 0x46, 0xC4, 0x30, 0xDD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x19, 0xED, 0x3B, 0x0C, 0xF8, 0x00, 0x00, 0x00, 0x88, 0x8A, 0x01, 0x00, 0x9E, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x0F, 0x08, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Can be assumed to also mean ComputeCRC48 is correct
TEST(Skylanders, Keygen)
{
  struct
  {
    std::array<u8, 4> nuid;
    u8 sector;
    u64 expected;
  } const inputs[]{{{0x00, 0x00, 0x00, 0x00}, 0, 0x4B0B20107CCB},
                   {{0x94, 0xB0, 0xEE, 0x2D}, 0, 0x4B0B20107CCB},
                   {{0x00, 0x00, 0x00, 0x00}, 11, 0xEA168579FF28},
                   {{0x94, 0xB0, 0xEE, 0x2D}, 1, 0x278e4DA896B5},
                   {{0xF7, 0xDB, 0xFD, 0x5F}, 2, 0x75B9B1F4B9EB}};

  for (auto& test : inputs)
  {
    auto actual = CalculateKeyA(test.sector, test.nuid);
    EXPECT_EQ(test.expected, actual);
  }
}

// Can be assumed to also mean ComputeCRC16 is correct
TEST(Skylanders, Checksums)
{
  std::array<u8, 2> actual = {};
  ComputeChecksumType0(decrypted_jaw_breaker.data(), actual.data());
  EXPECT_EQ(Common::BitCastPtr<u16>(decrypted_jaw_breaker.data() + 0x1E),
            Common::BitCastPtr<u16>(actual.data()));

  u16 areaOffset = 0x80;

  for (u8 i = 0; i < 2; i++)
  {
    ComputeChecksumType3(decrypted_jaw_breaker.data() + areaOffset + 0x50, actual.data());
    EXPECT_EQ(Common::BitCastPtr<u16>(decrypted_jaw_breaker.data() + areaOffset + 0xA),
              Common::BitCastPtr<u16>(actual.data()));

    ComputeChecksumType2(decrypted_jaw_breaker.data() + areaOffset + 0x10, actual.data());
    EXPECT_EQ(Common::BitCastPtr<u16>(decrypted_jaw_breaker.data() + areaOffset + 0xC),
              Common::BitCastPtr<u16>(actual.data()));

    ComputeChecksumType1(decrypted_jaw_breaker.data() + areaOffset, actual.data());
    EXPECT_EQ(Common::BitCastPtr<u16>(decrypted_jaw_breaker.data() + areaOffset + 0xE),
              Common::BitCastPtr<u16>(actual.data()));

    ComputeChecksumType1(decrypted_jaw_breaker.data() + areaOffset, actual.data());
    EXPECT_EQ(Common::BitCastPtr<u16>(decrypted_jaw_breaker.data() + areaOffset + 0xE),
              Common::BitCastPtr<u16>(actual.data()));

    areaOffset += 0x90;

    ComputeChecksumType6(decrypted_jaw_breaker.data() + areaOffset, actual.data());
    EXPECT_EQ(Common::BitCastPtr<u16>(decrypted_jaw_breaker.data() + areaOffset),
              Common::BitCastPtr<u16>(actual.data()));

    areaOffset += 0x130;
  }
}

TEST(Skylanders, ToyCode)
{
  std::array<u8, 11> code_chars = ComputeToyCode(
      (static_cast<u64>(Common::BitCastPtr<u32>(decrypted_jaw_breaker.data() + 0x18)) << 32) |
      Common::BitCastPtr<u32>(decrypted_jaw_breaker.data() + 0x14));

  std::string code(code_chars.begin(), code_chars.end());

  EXPECT_EQ(code, "WCJGC-HHR5Q");
}
